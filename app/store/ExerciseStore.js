/*
 * File: app/store/ExerciseStore.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.store.ExerciseStore', {
    extend: 'Ext.data.Store',

    requires: [
        'LanistaTrainer.model.ExerciseModel',
        'Ext.data.proxy.LocalStorage'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'ExerciseStore',
            model: 'LanistaTrainer.model.ExerciseModel',
            proxy: {
                type: 'localstorage',
                read: function(operation, callback, scope) {
                    var me = this,
                        records = [],
                        i = 0,
                        success = true,
                        Model = me.model,
                        sorters = operation.sorters,
                        filters = operation.filters,
                        ids, length, record, data, id;

                    operation.setStarted();

                    if(me.isHierarchical) {
                        records = me.getTreeData();
                    } else {
                        ids = me.getIds();
                        length = ids.length;
                        id = operation.id;
                        //read a single record
                        if (id) {
                            data = me.getRecord(id);
                            if (data !== null) {
                                record = new Model(data, id, data);
                            }

                            if (record) {
                                records.push(record);
                            } else {
                                success = false;
                            }
                        } else {
                            //console.log(operation);
                            for (; i < length; i++) {
                                id = ids[i];
                                data = me.getRecord(id);
                                records.push(new Model(data, id, data));
                            }
                            var collection = Ext.create('Ext.util.MixedCollection');
                            collection.addAll(records);

                            me.totalCount = collection.getCount();

                            // First we comply to filters
                            if (filters && filters.length) {
                                collection = collection.filter(filters);
                                me.totalCount = collection.getCount();
                            }
                            // Then we comply to sorters
                            if (sorters && sorters.length) {
                                collection.sort(sorters);
                            }

                            //console.log(me.totalCount);
                            //console.log(operation.start);
                            //console.log(operation.limit);
                            records = collection.items.slice(operation.start, operation.start + operation.limit);

                        }

                    }

                    if(success) {
                        operation.setSuccessful();
                    }
                    operation.setCompleted();

                    operation.resultSet = Ext.create('Ext.data.ResultSet', {
                        records: records,
                        total  : records.length,
                        loaded : true
                    });

                    if (typeof callback == 'function') {
                        callback.call(scope || me, operation);
                    }
                },
                id: 'a'
            }
        }, cfg)]);
    }
});