/*
 * File: app/controller/ExerciseController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.ExerciseController', {
    extend: 'Ext.app.Controller',
    alias: 'controller.exerciseController',

    id: 'exerciseController',

    refs: {
        mainStage: '#mainStage',
        rightCommandPanel: '#rightCommandPanel',
        leftCommandPanel: '#leftCommandPanel',
        mainViewport: {
            selector: 'mainViewport',
            xtype: 'mainviewport'
        },
        exercisePanel: {
            autoCreate: true,
            selector: '#exercisePanel',
            xtype: 'exercisePanel'
        },
        videoWindow: {
            autoCreate: true,
            selector: '#videoWindow',
            xtype: 'videowindow'
        },
        lanistaStage: '#lanistaStage'
    },

    control: {
        "#exercisePanelContent": {
            tabchange: 'onTabpanelTabChange'
        },
        "viewport #closeExercisePanel": {
            click: 'onCloseExerciseBottonClick'
        },
        "viewport #videoButton": {
            click: 'onVideoButtonClick'
        }
    },

    onTabpanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
            var controller = this;

            controller.getRightCommandPanel().items.each(function (item) {
                item.hide();
            });
            if ( newCard.id == 'info' ) {
                controller.showInfoTabCommands();
            }
    },

    onCloseExerciseBottonClick: function(button, e, eOpts) {
        var controller = this;

        LanistaTrainer.app.fireEvent('closeExercisePanel'  , function() {
            //LanistaTrainer.app.setStandardButtons('close' + LanistaTrainer.app.panels[LanistaTrainer.app.panels.length - 1] + 'Button');
            //controller.getController(controller.getMainStage().getLayout().getActiveItem().controller.id).showCommands();
            //controller.getController(controller.getMainStage().getLayout().getActiveItem().controller.id).setHeader();

            LanistaTrainer.app.getController ('PlanController').showCommands();
            controller.getMainStage().getLayout().getActiveItem().removeCls ('blured');


            /*if (controller.getMainStage().getLayout().getActiveItem().id === 'planPanel'){
                var planController = LanistaTrainer.app.getController ('PlanController'),
                    activeTabPlan = planController.getPlanPanel().down('tabpanel').getActiveTab();

                planController.currentDay = activeTabPlan;
                activeTabPlan.store.reload();

            }*/
        });
    },

    onVideoButtonClick: function(button, e, eOpts) {
        var controller = this,
            windowPanel = controller.getVideoWindow(),
            //viewPort = LanistaTrainer.app.getController('MainController').getLanistaStage().up('mainViewport'),
            viewPort = controller.getLanistaStage().up('mainviewport'),
            //viewPort = controller.getMainViewport(),
            srcVideo = Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/video/video/' + controller.record.data.ext_id + '.mp4';

        windowPanel.html = '<div class="lanista-video" id="video"> <video autoplay controls loop name="media" class="x-media lanista-video-item" id="video_item"> <source src=' + srcVideo + '> "Your browser does not support the video tag." </video></div>';
        viewPort.add( windowPanel );
        viewPort.down('#lanistaCopyRights').setY(viewPort.el.dom.clientHeight - 40);
        windowPanel.show ();
        windowPanel.on ( 'hide', function ( component ) {
            component.destroy ();
        });
    },

    onShowExercisePanel: function(record, exerciseProtocoll, callback) {
        var controller = this,
            exercisePanel	= controller.getExercisePanel(),
            mainStage	= controller.getMainStage();

        controller.currentPlanExercise = exerciseProtocoll;
        controller.record = record;

        exercisePanel.down('#exercisePanelHeader').data = record.data;
        exercisePanel.down('#exercisePanelContent').items.items[0].data = record.data;
        controller.setActiveItemNew();

        var currentPlan = LanistaTrainer.app.getController ( 'PlanController' ).plan;
        if ( currentPlan ) {
            controller.currentPlanExercise.training = controller.currentPlanExercise.training_min;
            controller.currentPlanExercise.weight = controller.currentPlanExercise.weight_min;
        }

        exercisePanel.addCls('md-show');
        mainStage.add( exercisePanel );
        mainStage.getLayout().setActiveItem("exercisePanel",'1');

        exercisePanel.on('hide', function(component) {
            component.destroy();
        }, controller);

        controller.getLeftCommandPanel().items.each(function (item) {
            item.hide();
        });
        controller.getLeftCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.CLOSE,
                itemId: 'closeExercisePanel',
                glyph: '98@Lanista Icons', //b
                cls: [
                    'lanista-command-button',
                    'lanista-command-button-red'
                ]
            })
        );


        // *** 2 Show the panel
        exercisePanel.show();

        //exercisePanel.down('#exercisePanelContent').fireEvent('tabchange', exercisePanel, exercisePanel.down('#exercisePanelContent').setActiveTab(0));
        controller.showInfoTabCommands();
        LanistaTrainer.app.fireEvent('showExerciseHeaderUpdate');
        LanistaTrainer.app.fireEvent('showStage');

        // *** 4 Callback
        if (callback instanceof Function) callback();

    },

    setActiveItemNew: function(newCard, maintain) {
        Ext.override(Ext.layout.CardLayout, {
            setActiveItem: function(newCard, maintain) {

                var me = this,
                    owner = me.owner,
                    oldCard = me.activeItem,
                    rendered = owner.rendered,
                    newIndex;

                newCard = me.parseActiveItem(newCard);
                newIndex = owner.items.indexOf(newCard);

                // If the card is not a child of the owner, then add it.
                // Without doing a layout!
                if (newIndex == -1) {
                    newIndex = owner.items.items.length;
                    Ext.suspendLayouts();
                    newCard = owner.add(newCard);
                    Ext.resumeLayouts();
                }

                // Is this a valid, different card?
                if (newCard && oldCard != newCard) {
                    // Fire the beforeactivate and beforedeactivate events on the cards
                    if (newCard.fireEvent('beforeactivate', newCard, oldCard) === false) {
                        return false;
                    }
                    if (oldCard && oldCard.fireEvent('beforedeactivate', oldCard, newCard) === false) {
                        return false;
                    }

                    if (rendered) {
                        Ext.suspendLayouts();

                        // If the card has not been rendered yet, now is the time to do so.
                        if (!newCard.rendered) {
                            me.renderItem(newCard, me.getRenderTarget(), owner.items.length);
                        }

                        if (oldCard) {
                            if (!maintain) {
                                if (me.hideInactive) {
                                    oldCard.hide();
                                    oldCard.hiddenByLayout = true;
                                }
                            }

                            oldCard.fireEvent('deactivate', oldCard, newCard);
                        }
                        // Make sure the new card is shown
                        if (newCard.hidden) {
                            newCard.show();
                        }

                        // Layout needs activeItem to be correct, so set it if the show has not been vetoed
                        if (!newCard.hidden) {
                            me.activeItem = newCard;
                        }
                        Ext.resumeLayouts(true);
                    } else {
                        me.activeItem = newCard;
                    }

                    newCard.fireEvent('activate', newCard, oldCard);

                    return me.activeItem;
                }
                return false;
            }
        });
    },

    showInfoTabCommands: function() {
        controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        var videoButton = Ext.create('LanistaTrainer.view.LanistaButton', {
            text:  'VIDEO',
            itemId: 'videoButton',
            glyph: '89@Lanista Icons' //Y

        });

        controller.getRightCommandPanel().add(
            videoButton
        );
    },

    onCloseExercisePanel: function(callback) {
        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });
        controller.getLeftCommandPanel().items.each(function (item) {
            item.hide();
        });
        controller.getExercisePanel().hide();
        if (callback instanceof Function) callback();

    },

    init: function(application) {
        application.on({
            showExercisePanel: {
                fn: this.onShowExercisePanel,
                scope: this
            },
            closeExercisePanel: {
                fn: this.onCloseExercisePanel,
                scope: this
            }
        });
    }

});
