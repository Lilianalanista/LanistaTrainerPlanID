/*
 * File: app/controller/PlanController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LanistaTrainer.controller.PlanController', {
    extend: 'Ext.app.Controller',

    requires: [
        'Ext.app.route.Route'
    ],

    routes: {
        'planRoute/:id': 'showPlanRoute'
    },

    refs: {
        mainStage: '#mainStage',
        exercisesPanel: {
            autoCreate: true,
            selector: 'exercisesPanel',
            xtype: 'exercisespanel'
        },
        rightCommandPanel: '#rightCommandPanel',
        leftCommandPanel: '#leftCommandPanel',
        mainViewport: {
            selector: '#mainViewport',
            xtype: 'mainviewport'
        },
        planPanel: {
            selector: 'mainviewport #planPanel',
            xtype: 'planpanel'
        },
        planHeader: '#planHeader'
    },

    control: {
        "viewport #showLanguagesPanelButton": {
            click: 'onShowLanguagesPanelButtonClick'
        }
    },

    onShowLanguagesPanelButtonClick: function(button, e, eOpts) {
            button.menu.alignTo(button, 'c-c',[-220,0]);

    },

    showPlanRoute: function(id) {

        var controller = this,
            plan,
            language,
            userId = localStorage.getItem("user_id");

        language = Ext.ux.LanguageManager.lang;

        Ext.Ajax.request({
            url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + "/tpmanager/plan/getplan",
            params: {id: id, lang: language},
            method: 'post',
            failure : function(result, request){
                //console.log( "Failure form getPlan" );
            },
            success: function(response, opts) {
                try {
                    var data = Ext.decode(response.responseText);
                    plan = Ext.create('LanistaTrainer.model.Plan', {
                        id: data.plan.id,
                        days: data.plan.days,
                        duration: data.plan.duration,
                        description: data.plan.description,
                        name: data.plan.name,
                        creation_date: data.plan.creation_date,
                        changed_date: data.plan.changed_date,
                        template: data.plan.template,
                        creator_name: data.plan.creator_name,
                        creator_first_name: data.plan.creator_first_name,
                        creator_last_name: data.plan.creator_last_name,
                        creator_id: data.plan.creator_id,
                        bu_name: "",
                        bu_email: "",
                        bu_domain: "",
                        creator_website: data.plan.creator_website
                    });
                    controller.plan = plan;
                    controller.exercises = data.plan.exercises;
                    LanistaTrainer.app.panels[LanistaTrainer.app.panels.length] = 'PlanPanel';

                    if( data.plan.bu > 0 ) {
                        Ext.Ajax.request({
                            url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + "/tpmanager/plan/getbufromtemplate",
                            params: {id: id},
                            method: 'post',
                            failure : function(result, request){
                                //console.log( "Fehler beim Landen vom TP" );
                                LanistaTrainer.app.fireEvent( 'showPlanPanel', plan.data.name );
                            },
                            success: function(response, opts) {
                                try {
                                    var data = Ext.decode(response.responseText);
                                    //controller.bu = data.bu;
                                    //controller.bu_domain = data.domain;
                                    //controller.bu_name = data.name;
                                    //controller.bu_email = data.email;
                                    plan.data.bu_name = data.name;
                                    plan.data.bu_email = data.email;
                                    plan.data.bu_domain = data.domain;
                                    LanistaTrainer.app.fireEvent( 'showPlanPanel', plan.data.name );
                                } catch( err ) {
                                    //Ext.Msg.alert('Problem', 'Templatesinformation könnten nicht gelessen werden', Ext.emptyFn);
                                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.ERROR_TEMPLATE_BU_NOTFOUND_TEXT, Ext.ux.LanguageManager.TranslationArray.ERROR_TEMPLATE_BU_NOTFOUND_HEADER, Ext.emptyFn);
                                }
                            }
                        });

                    }
                    else
                        LanistaTrainer.app.fireEvent( 'showPlanPanel', plan.data.name );
                }
                catch( err ) {
                    //Ext.Msg.alert('Problem', 'Templatesinformation könnten nicht gelessen werden', Ext.emptyFn);
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.ERROR_TEMPLATE_BU_NOTFOUND_TEXT, Ext.ux.LanguageManager.TranslationArray.ERROR_TEMPLATE_BU_NOTFOUND_HEADER, Ext.emptyFn);
                }
            }
        });

        Ext.getStore('OwnExercisesStore').setProxy(new Ext.data.proxy.Ajax({
            url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/gettemplaterexercises',
            model: 'LanistaTrainer.model.ExerciseModel',
            noCache: false,
            reader: {
                type: 'json',
                root: 'entries'
            },
            extraParams: {
                id: id
            },
            headers: {
                user_id: userId
            }
        }));
        Ext.getStore('OwnExercisesStore').load();


    },

    onShowPlanPanel: function(planname, callback) {
        var controller = this,
            planExercisesStore,
            values,
            record,
            planPanel,
            divLogo = '',
            divInfoCustomer = '',
            title,
            viewPort,
            records,
            planExercise,
            plan;

            records = controller.exercises;
            controller.planname = planname;
            plan = controller.plan;

        var planPanel	= controller.getPlanPanel(),
                mainStage	= controller.getMainStage(),
                recordsArray = [],
                tabActiveId = controller.currentDay || controller.getPlanPanel ().down ('tabpanel').child('#d1');

            planPanel.controller = controller;
            controller.createDayPanels ( controller.plan.data.days );

            planPanel.on('hide', function(component) {
                component.destroy();
            }, controller);

            planPanel.show();

            divLogo = '';
            divInfoCustomer = '';
            title = '';


            title = "";
            divLogo = "<div class='lanista-header-template'><div class='lanista-header-plan-name'>" + controller.planname +
                      "</div> <div class='lanista-header-plan-duration'>"  + Ext.ux.LanguageManager.TranslationArray.FORM_PLAN_TIME  + ': &nbsp;' +
                      controller.plan.data.duration + ' ' +
                      Ext.ux.LanguageManager.TranslationArray.WEEKS + "</div></div>";

            planPanel.getComponent ('planHeader').update(controller.plan.data);
            if (!controller.plan.data.description)
                Ext.get('planHeaderDescription').setHtml('No description available');

            if (plan.data.bu_name)
            {
                Ext.get('planHeaderInfoBu').addCls('plan-header-info-bu');
                Ext.get('planHeaderValue').setHtml(plan.data.bu_name);
            }
            else
                Ext.get('planHeaderValue').setHtml(plan.data.creator_first_name + " " + plan.data.creator_last_name);

            planPanel.ownerCt.ownerCt.ownerCt.getComponent('header').update({
                info: divLogo + divInfoCustomer,
                title: title
            });

            planPanel.down ('tabpanel').setActiveTab(tabActiveId);
            controller.populateTabsExercisesByDay(records);

            if (!controller.rounds_min && !controller.training_min){
                values = [{rounds_min: 3, training_min: 12, training_unit: 0}];
                record = tabActiveId.recordsArray && tabActiveId.recordsArray[0] ? tabActiveId.recordsArray[0] : values[0];
                controller.rounds_min = record.rounds_min;
                controller.training_min = record.training_min;
                controller.training_unit = record.training_unit;
            }


            controller.showCommands();
        //    if (planPanel.down ('tabpanel').getActiveTab().getEl())
        //        planPanel.down ('tabpanel').getActiveTab().getEl().setHeight(planPanel.down ('tabpanel').getActiveTab().el.dom.clientHeight - 45);

            LanistaTrainer.app.fireEvent('showStage');

            if (callback instanceof Function) callback();

    },

    onLoginUser: function(email, password, successCallback, errorCallback) {
                Ext.ux.SessionManager.login (email, password, function(success, data) {
                    if (success) {
                        if (successCallback && successCallback instanceof Function) {
                            successCallback(data);
                        }
                    } else {
                        if (errorCallback && errorCallback instanceof Function) {
                            errorCallback(data);
                        }
                    }
                });
    },

    onShowPlanHeaderUpdate: function() {
            var controller = this,
                record = LanistaTrainer.app.currentCustomer,
                divLogo = '',
                divInfoCustomer = '',
                planPanel	= controller.getPlanPanel(),
                title = '';

            if (!record){
                title = "<div class='lanista-header-template-name'>" + Ext.ux.LanguageManager.TranslationArray.TEMPLATE_NAME + "</div>";
                divLogo = "<div class='lanista-header-template'><div class='lanista-header-plan-name'>" + controller.planname +
                    "</div> <div class='lanista-header-plan-duration'>"  + Ext.ux.LanguageManager.TranslationArray.FORM_PLAN_TIME  + ': &nbsp;' +
                    controller.plan.data.duration + ' ' +
                    Ext.ux.LanguageManager.TranslationArray.WEEKS + "</div></div>";
            }
            else{
                title = "<div class='lanista-header-plan-name'>" + controller.planname +
                    "</div> <div class='lanista-header-plan-duration'>"  + Ext.ux.LanguageManager.TranslationArray.FORM_PLAN_TIME  + ': &nbsp;' +
                    controller.plan.data.duration + ' ' +
                    Ext.ux.LanguageManager.TranslationArray.WEEKS + "</div>";
                divLogo = '<div class="lansita-header-customer-image-not-found"><div class="lansita-header-customer-logo" style="background-image: url(' + Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/img/p/'+ record.data.id + '_photo.jpg);"></div></div>';
                divInfoCustomer = '<div class="lansita-header-customer-name"> <span class="last-name">' + record.data.last_name + '</span><br> <span class="first-name">' + record.data.first_name +'</span></div>';
            }

            planPanel.down ('#planHeader').update(controller.plan.data);
            if (!controller.plan.data.description)
                Ext.get('planHeaderDescription').setHtml('No description available');

            controller.getMainViewport().down("#header").update({
                info: divLogo + divInfoCustomer,
                title: title
            });
    },

    createDayPanels: function(days, callBack) {
        var tabPanel = this.getPlanPanel ().down ( 'tabpanel' ),
                    controller = this;

                var from = 2,
                    to = days,
                    newList = null;

                for (from=2; from<=to; from++)
                {
                    if (tabPanel.items.getByKey('d'+from))
                        continue;
                    tabPanel.insert(tabPanel.items.getCount() -1 , {
                                    xtype: 'planexerciseslist',
                                    id: 'd'+from,
                                    itemId: 'd'+from,
                                    title: Ext.ux.LanguageManager.TranslationArray.DAY + ' ' + from
                                    //store: controller.plan.planLanistaTrainerModelPlanExercises()
                });
                }

    },

    populateTabsExercisesByDay: function(records, callBack) {
        var controller = this,
                    tabPanel = controller.getPlanPanel().down('tabpanel'),
                    recordsArray = [],
                    results,
                    tab;

                for ( var i = 1; i < tabPanel.items.length; i++ ) {
                    results = Ext.Array.filter(records, function(item) {
                        return item.day === i.toString();
                    });
                    tab = tabPanel.child('#d' + i);
                    for ( var j = 0; j < results.length; j++ ) {
                        recordsArray.push(results[j]);
                    }
                    if (recordsArray) {
                        if (tab){
                            tab.update(recordsArray);
                            tab.recordsArray = recordsArray;
                        }
                    }
                    recordsArray = [];
                }

                //This is for plans records that has been charged from a previously plan saved
                if (records.length > 0 && ( (!LanistaTrainer.app.getController ( 'PlanController' ).selectionsTab) || (LanistaTrainer.app.getController ( 'PlanController' ).selectionsTab.length === 0))) {
                    var selectionsTab = [],
                        itemTab = [];

                        selectionsTab[0] = [];
                        for ( i = 1; i < tabPanel.items.length; i++ ) {
                            //selectionsTab[i] = [];
                            tab = tabPanel.child('#d' + i);
                            if (tab.recordsArray){
                                selection = [];
                                for ( j = 0; j < tab.recordsArray.length; j++ ) {
                                    itemTab = [];
                                    itemTab[0] = tab.recordsArray[j].exercise_id !== 0 ? tab.recordsArray[j].exercise_id : tab.recordsArray[j].user_exercise_id;
                                    itemTab[1] = tab.recordsArray[j].exercise_ext_id;
                                    itemTab[2] = 1;
                                    selection.push(itemTab);
                                }
                                selectionsTab.push(selection);
                            }
                        }
                    controller.selectionsTab = selectionsTab;
                    controller.currentDay = controller.getPlanPanel ().down ('tabpanel').getActiveTab();
                }

    },

    setHeader: function() {

    },

    deleteItemView: function(data) {
        var PlanExercise = Ext.create('LanistaTrainer.model.PlanExercise'),
                    userId = localStorage.getItem("user_id");

                PlanExercise.data = data;
                PlanExercise.phantom = false;
                PlanExercise.setProxy(new Ext.data.proxy.Ajax({
                    url: Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/json',
                    model: 'PlanExercise',
                    noCache: false,
                    api: {
                        create: undefined,
                        read: undefined,
                        update: undefined,
                        destroy: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + '/tpmanager/planexercises/deleteexercise'
                    },
                    extraParams: {
                        exercise_id: PlanExercise.data.id
                    },
                    headers: {
                        user_id: userId
                    }
                }));

                PlanExercise.destroy ({
                    action: 'destroy'
                });

    },

    showCommands: function(callBack) {
        var controller = this;

        controller.getRightCommandPanel().items.each(function (item) {
            item.hide();
        });

        this.getRightCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.BUTTON_PLAN_OPTIONS,
                itemId: 'sharePlanButton',
                menu: controller.setPlanOptions(),
                menuButtonAlign: 'right',
                style: 'float: left;',
                glyph: '67@Lanista Icons' //C
            })
        );


        var controller = this;

        controller.getLeftCommandPanel().items.each(function (item) {
            item.hide();
        });

        var lLanguages = controller.listLanguages();
        this.getLeftCommandPanel().add(
            Ext.create('LanistaTrainer.view.LanistaButton', {
                text: Ext.ux.LanguageManager.TranslationArray.FORM_CUSTOMER_LANGUAGE,
                itemId: 'showLanguagesPanelButton',
                menu: lLanguages,
                menuButtonAlign: 'left',
                glyph: '114@Lanista Icons' //r
            })
        );


    },

    findBUData: function(BUId) {
        Ext.Ajax.request({
            url: LanistaPhone.util.Config.getServer_address() + LanistaPhone.util.Config.getServer_root_dir() + "plan/getbufromtemplate",
            params: {id: template.data.id},
            method: 'post',
            failure : function(result, request){
                //console.log( "Fehler beim Landen vom TP" );
            },
            success: function(response, opts) {
                try {
                    var data = Ext.decode(response.responseText);
                    //console.log ("BU");
                    //console.log( data );
                    if( data.bu > 0 ) {
                        LanistaPhone.app.bu = data.bu;
                    } else {
                        LanistaPhone.app.trainer_id = data.trainer_id;
                    }

                    if( callback instanceof Function ) {
                        callback();
                    }
                } catch( err ) {
                    //Ext.Msg.alert('Problem', 'Templatesinformation könnten nicht gelessen werden', Ext.emptyFn);
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.ERROR_TEMPLATE_BU_NOTFOUND_TEXT, Ext.ux.LanguageManager.TranslationArray.ERROR_TEMPLATE_BU_NOTFOUND_HEADER, Ext.emptyFn);
                }
            }
        });

    },

    setPlanOptions: function() {
        var controller = this,
            textEmail;

        textEmail = Ext.ux.LanguageManager.TranslationArray.SEND_EMAIL;

        if (Ext.ux.LanguageManager.lang === 'ES')
            textEmail = textEmail.substr(0, textEmail.indexOf('electrónico') - 1);


        planOptions = new Ext.menu.Menu(
            {
                defaults: {
                    height: '50px',
                    width: '210px'
                },
                cls:'lanista-menu-float',
                items:
                [
                    {text:  textEmail.toUpperCase(),
                     handler: function () {
                         Ext.Msg.prompt (
                             Ext.ux.LanguageManager.TranslationArray.SEND_EMAIL,
                             Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_INVALID_2,
                             function (response, email_to_send) {
                                 if (response === 'ok')
                                     controller.sendEmail(email_to_send);
                                 else
                                     return;
                             },
                             null,
                             false,
                             "",
                             {
                                 autoCapitalize: true,
                                 //placeHolder: Ext.ux.LanguageManager.TranslationArray.PLAN_NAME_DEFAULT,
                                 clearicon: true
                             }
                         );
                     }
                    },
                    {text:  Ext.ux.LanguageManager.TranslationArray.GENERATE_PDF.toUpperCase(),
                     handler: function () {
                         controller.generatePdf(controller.plan.data.id);
                     }
                    }
                ]
            }
        );


        return planOptions;

    },

    generatePdf: function(planid) {
        var controller = this;
        Ext.Ajax.request({
            url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + "/tpmanager/plan/generatepdf",
            method: 'post',
            params: { plan_id: planid, language: Ext.ux.LanguageManager.lang },
            timeout: 60000,
            failure : function(response){
                //Ext.Viewport.setMasked( false );
                data = Ext.decode(response.responseText);
                //console.log ( data );
                Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_PDF_SYNC_ERROR, '', Ext.emptyFn );
            },
            success: function(response, opts) {
                data = Ext.decode ( response.responseText);
                if ( data.success )
                {
                    var ref = window.open( Ext.ux.ConfigManager.getServer() +"/docs/tp_" + planid + ".pdf" , '_system', 'location=yes' );
                } else {
                    Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_PDF_PROBLEM, '', Ext.emptyFn);
                }
            }
        });
    },

    sendEmail: function(email) {
                var controller = this;
                if(!controller.validateEmail(email)) {
                    Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_INVALID_1,
                                  Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_INVALID_2,
                                  function() {
                                      Ext.Msg.prompt (
                                            Ext.ux.LanguageManager.TranslationArray.SEND_EMAIL,
                                            Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_INVALID_2,
                                            function (response, email_to_send) {
                                                if (response === 'ok')
                                                    controller.sendEmail(email_to_send);
                                                else
                                                    return;
                                            },
                                            null,
                                            false,
                                            "",
                                            {
                                                autoCapitalize: true,
                                                //placeHolder: Ext.ux.LanguageManager.TranslationArray.PLAN_NAME_DEFAULT,
                                                clearicon: true
                                            }
                                        );
                                  });
                } else {
                    var controller = this;
                        try{
                            Ext.Ajax.request({
                                url: Ext.ux.ConfigManager.getServer() + Ext.ux.ConfigManager.getRoot() + "/tpmanager/plan/sendmail",
                                method: 'post',
                                params: { plan_id: controller.plan.data.id, email: email, language: Ext.ux.LanguageManager.lang },
                                headers: { user_id: localStorage.getItem("user_id") },
                                failure : function(response){
                                    data = Ext.decode(response.responseText);
                                    //console.log ( data );
                                    Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, '', Ext.emptyFn );
                                },
                                success: function(response, opts) {
                                    data = Ext.decode ( response.responseText);
                                    if (data.success !== true)
                                    {
                                        Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, data.message, Ext.emptyFn);
                                    } else {
                                        //Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, data.message, Ext.emptyFn);
                                        Ext.Msg.alert( Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_SENT, '', Ext.emptyFn );
                                    }
                                }
                            });

                        } catch( err ) {
                               Ext.Msg.alert(Ext.ux.LanguageManager.TranslationArray.MSG_EMAIL_PROBLEM, '', Ext.emptyFn);
                        }

                }

    },

    validateEmail: function(email) {
        var controller = this;
        var reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;

        return (reg.test(email) === true);

    },

    listLanguages: function() {
            var menuItems = new Array();
            currLanguage = Ext.ux.LanguageManager.lang;

            if (currLanguage == 'DE') {
                menuItems.push(
                {
                    text:'ENGLISH',
                    handler: function () {
                                             LanistaTrainer.app.fireEvent('changeLanguage', 'EN', true);
                                         }
                });
                menuItems.push(
                {
                    text:'ESPAÑOL',
                    handler: function () {
                                             LanistaTrainer.app.fireEvent('changeLanguage', 'ES', true);
                                         }
                });
            } else if (currLanguage == 'EN') {
                menuItems.push(
                {
                    text:'DEUTSCH',
                    handler: function () {
                                             LanistaTrainer.app.fireEvent('changeLanguage', 'DE', true);
                                         }
                });
                menuItems.push(
                {
                    text:'ESPAÑOL',
                    handler: function () {
                                             LanistaTrainer.app.fireEvent('changeLanguage', 'ES', true);
                                         }
                });
            } else {
                menuItems.push(
                {
                    text:'DEUTSCH',
                    handler: function () {
                                             LanistaTrainer.app.fireEvent('changeLanguage', 'DE', true);
                                         }
                });
                menuItems.push(
                {
                    text:'ENGLISH',
                    handler: function () {
                                             LanistaTrainer.app.fireEvent('changeLanguage', 'EN', true);
                                         }
                });
            }


            var languages = new Ext.menu.Menu(
            {
                defaults: {
                    height: '50px',
                    width: '210px'
                },
                cls:'lanista-menu-float',
                items:[]
            });
            languages.add(menuItems);

            return languages;

    },

    onChangeLanguage: function(language, doQuestion) {
        Ext.ux.LanguageManager.setLanguage(language, function () {
            if (doQuestion)
            {
                Ext.Msg.confirm(Ext.ux.LanguageManager.TranslationArray.MSG_LANGUAGE_RESTART_1, Ext.ux.LanguageManager.TranslationArray.MSG_LANGUAGE_RESTART_2, function(button) {
                    self.lang = language;
                    if (button == 'yes') {
                        location.reload();
                    }
                });
            }
            else
                self.lang = language;
        });
    },

    init: function(application) {
        application.on({
            showPlanPanel: {
                fn: this.onShowPlanPanel,
                scope: this
            },
            loginUser: {
                fn: this.onLoginUser,
                scope: this
            },
            showPlanHeaderUpdate: {
                fn: this.onShowPlanHeaderUpdate,
                scope: this
            },
            changeLanguage: {
                fn: this.onChangeLanguage,
                scope: this
            }
        });
    }

});
